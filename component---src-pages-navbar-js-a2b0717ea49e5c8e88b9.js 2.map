{"version":3,"sources":["webpack://mvhacks-site/./src/pages/navbar.js"],"names":["timeoutCode","navbar","nav","document","querySelector","referrer","includes","window","location","hostname","container","style","setProperty","classList","add","querySelectorAll","forEach","e","s","setTimeout","toggle","setHeightOfContainer","expanded","contains","maxHeight","innerHeight","onChangeInExpanded","linkContainer","clearTimeout","childNodes","textContent","addEventListener","getElementById","target","parentElement","activeElement","nodeName","remove"],"mappings":"6JAAA,IAAIA,EAAc,KACH,SAASC,IACpB,IAAMC,EAAMC,SAASC,cAAc,OACnC,GAAID,SAASE,SAASC,SAASC,OAAOC,SAASC,UAC/C,CACI,IAAMC,EAAYR,EAClBQ,EAAUC,MAAMC,YAAY,aAAc,OAAQ,aAClDF,EAAUG,UAAUC,IAAI,YAExBJ,EAAUK,iBAAiB,KAAKC,SAAQ,SAAAC,GACpC,IAAMC,EAAID,EAAEN,MACZO,EAAEN,YAAY,QAAS,oBACvBM,EAAEN,YAAY,SAAU,WAE5BL,OAAOY,YAAW,SAAAF,GACdP,EAAUC,MAAMC,YAAY,aAAc,IAC1CF,EAAUG,UAAUO,OAAO,YACvBV,EAAUK,iBAAiB,KAAKC,SAAQ,SAAAC,GAC5C,IAAMC,EAAID,EAAEN,MACZO,EAAEN,YAAY,QAAS,IACvBM,EAAEN,YAAY,SAAU,MACzB,QAGP,SAASS,EAAqBC,GAC7B,IAAD,EACIA,EAAQ,UAAGA,SAAH,QAAepB,EAAIW,UAAUU,SAAS,YAO1CrB,EAAIS,MAAMa,UANTF,EAMqBf,OAAOkB,YAAY,GAAG,KAJtB,OAO9B,SAASC,EAAmBC,GAEpB,IAAML,EAAWK,EAAcd,UAAUU,SAAS,YAClDF,GAAqB,GACjBrB,GAEAO,OAAOqB,aAAa5B,GAExBA,EAAcO,OAAOY,YAAW,WAC5BnB,EAAc,KACd2B,EAAchB,MAAMC,YAAY,WAAYU,EAAS,OAAO,YAC7DA,EAAS,IAAI,GAChBf,OAAOY,YAAW,WAEdQ,EAAcE,WAAW,GAAGC,YAAcR,EAAS,IAAI,QACxD,KACHf,OAAOwB,iBAAiB,UAAU,SAAAd,GAE9BI,GAAqB,MAGjCA,GAAqB,GACrBlB,SAAS6B,eAAe,WAAWD,iBAAiB,SAAS,SAAAd,GAEzDA,EAAEgB,OAAOC,cAAcrB,UAAUO,OAAO,YACxCM,EAAmBT,EAAEgB,OAAOC,kBAGhC/B,SAAS4B,iBAAiB,SAAS,WAC/B,GAAwC,WAApC5B,SAASgC,cAAcC,UAA2E,QAAlDjC,SAASgC,cAAcD,cAAcE,SAErFjC,SAASgC,cAAcD,cAAcrB,UAAUC,IAAI,YACnDY,EAAmBvB,SAASgC,cAAcD,mBAG9C,CACI,IAAMxB,EAAYR,EAClBQ,EAAUG,UAAUwB,OAAO,YAC3BX,EAAmBhB,OAExB,GACHR,EAAIa,iBAAiB,KAAKC,SAAQ,SAAAC,GAC9BA,EAAEc,iBAAiB,SAAS,SAAAd,GACxB,IAAMP,EAAYR,EAClBQ,EAAUG,UAAUwB,OAAO,YAC3BX,EAAmBhB","file":"component---src-pages-navbar-js-a2b0717ea49e5c8e88b9.js","sourcesContent":["let timeoutCode = null;\nexport default function navbar() {\n    const nav = document.querySelector(\"nav\");\n    if (document.referrer.includes(window.location.hostname)) // checks to see if past page was same URL or not. If it was then it displays animation.\n    {\n        const container = nav;\n        container.style.setProperty(\"transition\", \"none\", \"important\");\n        container.classList.add(\"expanded\");\n\n        container.querySelectorAll(\"a\").forEach(e=>{\n            const s = e.style;\n            s.setProperty(\"color\", \"rgba(0, 0, 0, 0)\");\n            s.setProperty(\"border\", \"none\");\n        })\n        window.setTimeout(e=>{\n            container.style.setProperty(\"transition\", \"\");\n            container.classList.toggle(\"expanded\");\n                container.querySelectorAll(\"a\").forEach(e=>{\n            const s = e.style;\n            s.setProperty(\"color\", \"\");\n            s.setProperty(\"border\", \"\");\n        }, 500)\n        })\n    }\n    function setHeightOfContainer(expanded)\n    {\n        expanded = expanded ?? nav.classList.contains(\"expanded\"); // ?? means if first value is null then use the value after the ??. Basically if expanded is null, set expanded to the second term\n        if (!expanded)\n        {\n            nav.style.maxHeight = 70+\"px\"; // 70 because the button height is 50px and there is 10px of padding for both the top and the bottom.\n        }\n        else\n        {\n            nav.style.maxHeight = window.innerHeight-20+\"px\"; // window.innerHeight to get the max height visable (specificially for mobile) - 20 because of top and bottom padding.\n        }\n    }\n    function onChangeInExpanded(linkContainer)\n    {\n            const expanded = linkContainer.classList.contains(\"expanded\"); // checks if container is showing.\n            setHeightOfContainer(true);\n            if (timeoutCode)\n            {\n                window.clearTimeout(timeoutCode) // if the event hasn't happened, cancel the event.\n            }\n            timeoutCode = window.setTimeout(()=>{\n                timeoutCode = null // sets timeoutCode to null to show that the event already happened.\n                linkContainer.style.setProperty(\"overflow\", expanded?\"auto\":\"hidden\"); // shows scrollbar if needed. Without this the scrollbar would appear during the expanding animation\n            }, expanded?500:0) // 500ms = .5s or the animation time. The code inside of the brackets will run after the animation is finished.\n            window.setTimeout(()=>\n            {\n                linkContainer.childNodes[0].textContent = expanded?\"âœ•\":\"|||\";\n            }, 250);\n            window.addEventListener(\"resize\", e=>\n            {\n                setHeightOfContainer(true);\n            })\n    }\n    setHeightOfContainer(true);\n    document.getElementById(\"pancake\").addEventListener('click', e=> // when the pancake button is clicked\n    {\n        e.target.parentElement.classList.toggle(\"expanded\"); // toggle the class \"expanded\" on the parent of the target (the target is the pancake button) so it toggles the class expanded on the container.\n        onChangeInExpanded(e.target.parentElement);\n    })\n\n    document.addEventListener('focus', function() { // if user tabs over link then the menu opens, if they tab out it closes\n        if (document.activeElement.nodeName !== \"BUTTON\" && document.activeElement.parentElement.nodeName === \"NAV\")\n        {\n            document.activeElement.parentElement.classList.add(\"expanded\");\n            onChangeInExpanded(document.activeElement.parentElement);\n        }\n        else\n        {\n            const container = nav;\n            container.classList.remove(\"expanded\");\n            onChangeInExpanded(container);\n        }\n    }, true);\n    nav.querySelectorAll(\"a\").forEach(e=>{\n        e.addEventListener(\"click\", e=>{\n            const container = nav;\n            container.classList.remove(\"expanded\");\n            onChangeInExpanded(container);\n        })\n    })\n}"],"sourceRoot":""}