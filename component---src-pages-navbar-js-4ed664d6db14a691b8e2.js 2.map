{"version":3,"sources":["webpack://mvhacks-site/./src/pages/navbar.js"],"names":["timeoutCode","navbar","document","setHeightOfContainer","expanded","nav","classList","contains","style","maxHeight","window","innerHeight","onChangeInExpanded","linkContainer","clearTimeout","setTimeout","setProperty","childNodes","textContent","addEventListener","e","querySelector","referrer","includes","location","hostname","container","add","querySelectorAll","forEach","s","toggle","getElementById","target","parentElement","activeElement","nodeName","remove"],"mappings":"2KAEIA,EAAc,KACH,SAASC,IACpB,GAAwB,oBAAbC,SAA0B,CAAC,IAwBzBC,EAAT,SAA8BC,GAC7B,IAAD,EACIA,EAAQ,UAAGA,SAAH,QAAeC,EAAIC,UAAUC,SAAS,YAO1CF,EAAIG,MAAMC,UANTL,EAMqBM,OAAOC,YAAY,GAAG,KAJtB,QAOrBC,EAAT,SAA4BC,GAEpB,IAAMT,EAAWS,EAAcP,UAAUC,SAAS,YAClDJ,GAAqB,GACjBH,GAEAU,OAAOI,aAAad,GAExBA,EAAcU,OAAOK,YAAW,WAC5Bf,EAAc,KACda,EAAcL,MAAMQ,YAAY,WAAYZ,EAAS,OAAO,YAC7DA,EAAS,IAAI,GAChBM,OAAOK,YAAW,WAEdF,EAAcI,WAAW,GAAGC,YAAcd,EAAS,IAAI,QACxD,KACHM,OAAOS,iBAAiB,UAAU,SAAAC,GAE9BjB,GAAqB,OArD3BE,EAAMH,SAASmB,cAAc,OAEnC,GAAInB,SAASoB,SAASC,SAASb,OAAOc,SAASC,UAC/C,CACI,IAAMC,EAAYrB,EAClBqB,EAAUlB,MAAMQ,YAAY,aAAc,OAAQ,aAClDU,EAAUpB,UAAUqB,IAAI,YAExBD,EAAUE,iBAAiB,KAAKC,SAAQ,SAAAT,GACpC,IAAMU,EAAIV,EAAEZ,MACZsB,EAAEd,YAAY,QAAS,oBACvBc,EAAEd,YAAY,SAAU,WAE5BN,OAAOK,YAAW,SAAAK,GACdM,EAAUlB,MAAMQ,YAAY,aAAc,IAC1CU,EAAUpB,UAAUyB,OAAO,YACvBL,EAAUE,iBAAiB,KAAKC,SAAQ,SAAAT,GAC5C,IAAMU,EAAIV,EAAEZ,MACZsB,EAAEd,YAAY,QAAS,IACvBc,EAAEd,YAAY,SAAU,MACzB,QAoCPb,GAAqB,GACrBD,SAAS8B,eAAe,WAAWb,iBAAiB,SAAS,SAAAC,GAEzDA,EAAEa,OAAOC,cAAc5B,UAAUyB,OAAO,YACxCnB,EAAmBQ,EAAEa,OAAOC,kBAGhChC,SAASiB,iBAAiB,SAAS,WAC/B,GAAwC,WAApCjB,SAASiC,cAAcC,UAA2E,QAAlDlC,SAASiC,cAAcD,cAAcE,SAErFlC,SAASiC,cAAcD,cAAc5B,UAAUqB,IAAI,YACnDf,EAAmBV,SAASiC,cAAcD,mBAG9C,CACI,IAAMR,EAAYrB,EAClBqB,EAAUpB,UAAU+B,OAAO,YAC3BzB,EAAmBc,OAExB,GACHrB,EAAIuB,iBAAiB,KAAKC,SAAQ,SAAAT,GAC9BA,EAAED,iBAAiB,SAAS,SAAAC,GACxB,IAAMM,EAAYrB,EAClBqB,EAAUpB,UAAU+B,OAAO,YAC3BzB,EAAmBc,SAK/B,OAAO","file":"component---src-pages-navbar-js-4ed664d6db14a691b8e2.js","sourcesContent":["import React from 'react';\n\nlet timeoutCode = null;\nexport default function navbar() {\n    if (typeof document !== 'undefined') {\n        const nav = document.querySelector(\"nav\");\n\n        if (document.referrer.includes(window.location.hostname)) // checks to see if past page was same URL or not. If it was then it displays animation.\n        {\n            const container = nav;\n            container.style.setProperty(\"transition\", \"none\", \"important\");\n            container.classList.add(\"expanded\");\n\n            container.querySelectorAll(\"a\").forEach(e=>{\n                const s = e.style;\n                s.setProperty(\"color\", \"rgba(0, 0, 0, 0)\");\n                s.setProperty(\"border\", \"none\");\n            })\n            window.setTimeout(e=>{\n                container.style.setProperty(\"transition\", \"\");\n                container.classList.toggle(\"expanded\");\n                    container.querySelectorAll(\"a\").forEach(e=>{\n                const s = e.style;\n                s.setProperty(\"color\", \"\");\n                s.setProperty(\"border\", \"\");\n            }, 500)\n            })\n        }\n        function setHeightOfContainer(expanded)\n        {\n            expanded = expanded ?? nav.classList.contains(\"expanded\"); // ?? means if first value is null then use the value after the ??. Basically if expanded is null, set expanded to the second term\n            if (!expanded)\n            {\n                nav.style.maxHeight = 70+\"px\"; // 70 because the button height is 50px and there is 10px of padding for both the top and the bottom.\n            }\n            else\n            {\n                nav.style.maxHeight = window.innerHeight-20+\"px\"; // window.innerHeight to get the max height visable (specificially for mobile) - 20 because of top and bottom padding.\n            }\n        }\n        function onChangeInExpanded(linkContainer)\n        {\n                const expanded = linkContainer.classList.contains(\"expanded\"); // checks if container is showing.\n                setHeightOfContainer(true);\n                if (timeoutCode)\n                {\n                    window.clearTimeout(timeoutCode) // if the event hasn't happened, cancel the event.\n                }\n                timeoutCode = window.setTimeout(()=>{\n                    timeoutCode = null // sets timeoutCode to null to show that the event already happened.\n                    linkContainer.style.setProperty(\"overflow\", expanded?\"auto\":\"hidden\"); // shows scrollbar if needed. Without this the scrollbar would appear during the expanding animation\n                }, expanded?500:0) // 500ms = .5s or the animation time. The code inside of the brackets will run after the animation is finished.\n                window.setTimeout(()=>\n                {\n                    linkContainer.childNodes[0].textContent = expanded?\"âœ•\":\"|||\";\n                }, 250);\n                window.addEventListener(\"resize\", e=>\n                {\n                    setHeightOfContainer(true);\n                })\n        }\n        setHeightOfContainer(true);\n        document.getElementById(\"pancake\").addEventListener('click', e=> // when the pancake button is clicked\n        {\n            e.target.parentElement.classList.toggle(\"expanded\"); // toggle the class \"expanded\" on the parent of the target (the target is the pancake button) so it toggles the class expanded on the container.\n            onChangeInExpanded(e.target.parentElement);\n        })\n\n        document.addEventListener('focus', function() { // if user tabs over link then the menu opens, if they tab out it closes\n            if (document.activeElement.nodeName !== \"BUTTON\" && document.activeElement.parentElement.nodeName === \"NAV\")\n            {\n                document.activeElement.parentElement.classList.add(\"expanded\");\n                onChangeInExpanded(document.activeElement.parentElement);\n            }\n            else\n            {\n                const container = nav;\n                container.classList.remove(\"expanded\");\n                onChangeInExpanded(container);\n            }\n        }, true);\n        nav.querySelectorAll(\"a\").forEach(e=>{\n            e.addEventListener(\"click\", e=>{\n                const container = nav;\n                container.classList.remove(\"expanded\");\n                onChangeInExpanded(container);\n            })\n        })\n    }\n    \n    return <></>;\n}"],"sourceRoot":""}